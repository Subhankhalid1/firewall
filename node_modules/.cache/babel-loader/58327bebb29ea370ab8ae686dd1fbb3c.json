{"ast":null,"code":"import _regeneratorRuntime from\"D:/Working Era of React/BootCamp2020/firewall/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Working Era of React/BootCamp2020/firewall/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/Working Era of React/BootCamp2020/firewall/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var PayWithPayPal=function PayWithPayPal(_ref){var items=_ref.items,total=_ref.total;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),paidFor=_useState2[0],setPaidfor=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var PayPalRef=useRef();useEffect(function(){window.paypal.Buttons({createOrder:function createOrder(data,actions){return actions.order.create({intent:\"CAPTURE\",purchase_units:[{description:\"Firewall Force Payment\",amount:{currency_code:'USD',value:total}}]});},onApprove:function(){var _onApprove=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data,actions){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return actions.order.capture();case 2:setPaidfor(true);case 3:case\"end\":return _context.stop();}}},_callee);}));function onApprove(_x,_x2){return _onApprove.apply(this,arguments);}return onApprove;}(),onError:function onError(err){setError(err);}}).render(PayPalRef.current);},[]);if(paidFor)return/*#__PURE__*/_jsx(\"h1\",{children:\"Thanks for purchasing...!\"});if(error)return/*#__PURE__*/_jsx(\"h1\",{children:\"Error in payment processing...!\"});return/*#__PURE__*/_jsx(\"div\",{ref:PayPalRef});};export default PayWithPayPal;","map":{"version":3,"sources":["D:/Working Era of React/BootCamp2020/firewall/src/component/Cart/PayWithPayPal.jsx"],"names":["React","useState","useRef","useEffect","PayWithPayPal","items","total","paidFor","setPaidfor","error","setError","PayPalRef","window","paypal","Buttons","createOrder","data","actions","order","create","intent","purchase_units","description","amount","currency_code","value","onApprove","capture","onError","err","render","current"],"mappings":"yeAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,SAAlC,KAAmD,OAAnD,C,2CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAsB,IAAnBC,CAAAA,KAAmB,MAAnBA,KAAmB,CAAZC,KAAY,MAAZA,KAAY,CACxC,cAA8BL,QAAQ,CAAC,KAAD,CAAtC,wCAAOM,OAAP,eAAgBC,UAAhB,eACA,eAA0BP,QAAQ,CAAC,IAAD,CAAlC,yCAAOQ,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,SAAS,CAAGT,MAAM,EAAxB,CAEAC,SAAS,CAAC,UAAM,CACZS,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsB,CAClBC,WAAW,CAAE,qBAACC,IAAD,CAAOC,OAAP,CAAmB,CAC5B,MAAOA,CAAAA,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqB,CACxBC,MAAM,CAAE,SADgB,CAExBC,cAAc,CAAE,CAAC,CACbC,WAAW,CAAE,wBADA,CAEbC,MAAM,CAAE,CACJC,aAAa,CAAE,KADX,CAEJC,KAAK,CAAEnB,KAFH,CAFK,CAAD,CAFQ,CAArB,CAAP,CAUH,CAZiB,CAalBoB,SAAS,mFAAE,iBAAOV,IAAP,CAAaC,OAAb,wIACDA,CAAAA,OAAO,CAACC,KAAR,CAAcS,OAAd,EADC,QAEPnB,UAAU,CAAC,IAAD,CAAV,CAFO,sDAAF,2FAbS,CAiBlBoB,OAAO,CAAE,iBAAAC,GAAG,CAAI,CACZnB,QAAQ,CAACmB,GAAD,CAAR,CACH,CAnBiB,CAAtB,EAoBGC,MApBH,CAoBUnB,SAAS,CAACoB,OApBpB,EAqBH,CAtBQ,CAsBN,EAtBM,CAAT,CAwBA,GAAIxB,OAAJ,CAAa,mBAAO,iDAAP,CACb,GAAIE,KAAJ,CAAW,mBAAO,uDAAP,CACX,mBAAQ,YAAK,GAAG,CAAEE,SAAV,EAAR,CACH,CAhCD,CAkCA,cAAeP,CAAAA,aAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst PayWithPayPal = ({ items, total }) => {\r\n    const [paidFor, setPaidfor] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const PayPalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        window.paypal.Buttons({\r\n            createOrder: (data, actions) => {\r\n                return actions.order.create({\r\n                    intent: \"CAPTURE\",\r\n                    purchase_units: [{\r\n                        description: \"Firewall Force Payment\",\r\n                        amount: {\r\n                            currency_code: 'USD',\r\n                            value: total\r\n                        }\r\n                    }]\r\n                })\r\n            },\r\n            onApprove: async (data, actions) => {\r\n                await actions.order.capture();\r\n                setPaidfor(true);\r\n            },\r\n            onError: err => {\r\n                setError(err);\r\n            }\r\n        }).render(PayPalRef.current)\r\n    }, [])\r\n\r\n    if (paidFor) return <h1>Thanks for purchasing...!</h1>\r\n    if (error) return <h1>Error in payment processing...!</h1>\r\n    return (<div ref={PayPalRef}></div>);\r\n}\r\n\r\nexport default PayWithPayPal\r\n"]},"metadata":{},"sourceType":"module"}